{*******************************************************************************
 * Copyright 2018 SRP GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************}

//   Ziel:  Präsentation aller Symbole einer Symbolbibliothek in einer
//          leeren YADE-Karte



// neue Karte
neu still;

defvar TBL_TEMP_SYM : char = 'Temp_sy';

klasseNeu TBL_TEMP_SYM;
update klassen set Gruppe = 255 where Klassenname = TBL_TEMP_SYM;

set sysFG = ein;
set sysfax1 = 393400;
set sysfay1 = 5817500;



defbefehl InsSymNames, ''

  defvar xTitelHöhe num = 40.0;
  defvar xSYHöhe num = 60.0;

  defvar symbolName : char;
  defvar i : int = 1;
  defvar x : int = 1;
  defvar y : int = 1;
  defvar xAnzZeile : int = 10;
  // Abstandsfaktor
  defvar abstand : num = 2.0;
  defvar xlibname char;
  defvar posX num;
  defvar posY num;

  // 1. Symbolbibliothek auswählen
  Pause 'Bitte wählen Sie zunächst die Symbolbibliothek aus!';

  set xlibname = fileOpenDlg('Symbolbibliothek', '*.sym');
  if xlibname = '' then EXIT; endif;

  // 2. Anzahl der Zeilenelemente angeben
  defvar eingabeLeer : bool = ein;

  while eingabeLeer do

    Eingabe xAnzZeile, ('Bitte geben Sie die Anzahl der Symbole einer Zeile an!'), ein;
    set eingabeLeer = (xanzZeile < 1);

  endWhile;

  if eingabeLeer then EXIT; endif;

  schriftarten 0, 'ARIAL', 'fett';

  // 3. Symbolbibliothek laden
  symbolBibliothek xLibName;

  insert into
    GeoDB  (Elemtyp, aufschrift, ElemEinfX, ElemEinfY                , höhe      )
    values (text   , xlibname  , sysfax1  , sysfay1 + (xSYHöhe * 1.5), xTitelHöhe);

  zeichneMenge;
  selinit selMenge;

  set symbolName = getSymbolName(xLibName, i);

  // 4. Symbole in Karte einfügen
  while symbolName <> '' do

    writeLn symbolName;

    // Einfügepositionen berechnen
    set posX = sysfax1 + (x - 1) * (xSYHöhe * abstand);
    set posY = sysfay1 - (y - 1) * (xSYHöhe * abstand);

    insert into { Symbol }
        GeoDB  (ElemTyp, ElemEinfX, ElemEinfY, Aufschrift, KlassName, Stift, Strichart, Höhe    , Winkel)
        values (symbol , posX     , posY     , symbolName, 'NULL'   , 4    , 1        , xSYHöhe , 0     );

    zeichneMenge;

    set posY = sysfay1 - (xSYHöhe * abstand) - (y - 1.1) * (xSYHöhe * abstand) + (xSYHöhe - 5);

    insert into { Symbolname }
        GeoDB  (ElemTyp, ElemEinfX, ElemEinfY, Aufschrift, KlassName, Stift, Strichart, Höhe        , Winkel, Ausrichtung )
        values (text   , posX     , posY     , symbolName, 'NULL'   , 4    , 1        , xSYHöhe / 4 , 0     , 'MitteUnten');

    zeichneMenge;

    inc(x);

    if x > xAnzZeile then
      set x = 1;
      inc(y);
    endif;

    inc(i);
    set symbolName = getSymbolName(xLibName, i);

  endWhile;

  select * from geoDB where elemTyp = symbol;
  writeln 'Es wurden ', sysSelAnzahl, ' Symbole eingefügt.';
  zoomAlles;
  SelInit Selmenge;

endbefehl;


InsSymNames;